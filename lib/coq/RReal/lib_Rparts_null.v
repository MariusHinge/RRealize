(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require HighOrd.
Require set.Set.
Require map.Map.
Require map.Const.

Axiom rreal : Type.
Parameter rreal_WhyType : WhyType rreal.
Existing Instance rreal_WhyType.

Parameter setrreal: rreal -> bool.

Parameter rzero: rreal.

Parameter rone: rreal.

Parameter rtwo: rreal.

Axiom oneIsNotZero : ~ (rone = rzero).

Axiom twoIsNotOne : ~ (rtwo = rone).

Axiom twoIsNotZero : ~ (rtwo = rzero).

(* Why3 assumption *)
Definition rel (a:Type) (b:Type) := (a* b)%type -> bool.

Parameter power:
  forall {a:Type} {a_WT:WhyType a}, (a -> bool) -> (a -> bool) -> bool.

Axiom mem_power :
  forall {a:Type} {a_WT:WhyType a},
  forall (x:a -> bool) (y:a -> bool),
  (set.Set.mem x (power y)) <-> (set.Set.subset x y).

Parameter leq: (rreal* rreal)%type -> bool.

Parameter lt: (rreal* rreal)%type -> bool.

Parameter geq: (rreal* rreal)%type -> bool.

Parameter gt: (rreal* rreal)%type -> bool.

Axiom zeroLtOne : set.Set.mem (rzero, rone) lt.

Axiom oneLtTwo : set.Set.mem (rone, rtwo) lt.

Parameter rrealStar: rreal -> bool.

Parameter rrealPlus: rreal -> bool.

Parameter rrealMinus: rreal -> bool.

Parameter rrealPlusStar: rreal -> bool.

Parameter rrealMinusStar: rreal -> bool.

(* Why3 assumption *)
Definition notRzero : Prop := forall (x:rreal), ~ (x = rzero).

(* Why3 assumption *)
Definition isPos : Prop := forall (x:rreal), set.Set.mem (rzero, x) leq.

(* Why3 assumption *)
Definition isNeg : Prop := forall (x:rreal), set.Set.mem (x, rzero) leq.

(* Why3 assumption *)
Definition isStrictPos : Prop := forall (x:rreal), set.Set.mem (rzero, x) lt.

(* Why3 assumption *)
Definition isStrictNeg : Prop := forall (x:rreal), set.Set.mem (x, rzero) lt.

